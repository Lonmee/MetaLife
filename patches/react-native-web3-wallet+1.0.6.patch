diff --git a/node_modules/react-native-web3-wallet/index.js b/node_modules/react-native-web3-wallet/index.js
index 51551ba..cf2c86a 100644
--- a/node_modules/react-native-web3-wallet/index.js
+++ b/node_modules/react-native-web3-wallet/index.js
@@ -8,20 +8,28 @@ import "@ethersproject/shims"
 import { ethers } from "ethers";
 
 //Fisherâ€“Yates shuffle
-Array.prototype.shuffle = function () {
-    var array = this;
-    var m = array.length,
-      t,
-      i;
-    while (m) {
-      i = Math.floor(Math.random() * m--);
-      t = array[m];
-      array[m] = array[i];
-      array[i] = t;
+// Array.prototype.shuffle = function () {
+//     var array = this;
+//     var m = array.length,
+//       t,
+//       i;
+//     while (m) {
+//       i = Math.floor(Math.random() * m--);
+//       t = array[m];
+//       array[m] = array[i];
+//       array[i] = t;
+//     }
+//     return array;
+// };
+function shuffle(mnemonic) {
+    let cMne = mnemonic.split(' '),
+        res = [];
+    while (cMne.length > 0) {
+        let index = Math.floor(Math.random() * cMne.length);
+        res.push(cMne.splice(index, 1)[0]);
     }
-    return array;
-};
-
+    return res;
+}
 
 export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16, needPrivateKey = false, needPublicKey = false){
     return new Promise((fulfill, reject)=>{
@@ -37,36 +45,41 @@ export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16,
             var end = performance.now();
             console.log('mnemonic done', `${end - start}ms\n`);
 
-            let wallet = ethers.Wallet.fromMnemonic(mnemonic, path);
-        
-            end = performance.now();
-            console.log('wallet init', `${end - start}ms\n`);
+            ethers.Wallet.fromMnemonic(mnemonic, path)
+            .then(wallet=>{
+                end = performance.now();
+                console.log('wallet init', `${end - start}ms\n`);
 
-            let mnemonicArr = mnemonic.split(' ');
-            let shuffleMnemonicArr = mnemonicArr.slice().shuffle();
+                let mnemonicArr = mnemonic.split(' ');
+                let shuffleMnemonicArr = shuffle(mnemonicArr.slice());
 
-            wallet.encrypt(password).then(res=>{
-                end = performance.now();
-                let jsonObj = JSON.parse(res);
-                delete jsonObj['x-ethers'];
+                wallet.encrypt(password).then(res=>{
+                    end = performance.now();
+                    let jsonObj = JSON.parse(res);
+                    delete jsonObj['x-ethers'];
 
-                let response = {
-                    mnemonic : mnemonicArr, 
-                    keystore : jsonObj,
-                    shuffleMnemonic : shuffleMnemonicArr,
-                };
-                if(needPublicKey){
-                    response.publicKey=wallet.publicKey;
-                }
-                if(needPrivateKey){
-                    response.privateKey=wallet.privateKey;
-                }
+                    let response = {
+                        mnemonic : mnemonicArr,
+                        keystore : jsonObj,
+                        shuffleMnemonic : shuffleMnemonicArr,
+                    };
+                    if(needPublicKey){
+                        response.publicKey=wallet.publicKey;
+                    }
+                    if(needPrivateKey){
+                        response.privateKey=wallet.privateKey;
+                    }
 
-                fulfill(response)
+                    fulfill(response);
+                })
+                .catch(err=>{
+                    reject(err);
+                });
             })
             .catch(err=>{
                 reject(err);
             });
+
         } catch (error) {
             reject(error);
         }
@@ -176,8 +189,13 @@ export function getContractNfts(network, contractAddress, contractAbi, address){
 export function exportPrivateKeyFromMnemonic(mnemonic, path){
     return new Promise((fulfill, reject)=>{
         try {
-            let wallet = ethers.Wallet.fromMnemonic(mnemonic, path)
-            fulfill(wallet.privateKey);
+            ethers.Wallet.fromMnemonic(mnemonic, path)
+            .then(wallet=>{
+                fulfill(wallet.privateKey);
+            })
+            .catch(err=>{
+                reject(err);
+            })
         } catch (error) {
             reject(error);
         }
@@ -195,6 +213,23 @@ export function exportPrivateKeyFromKeystore(keystore, password){
     });
 }
 
+export function exportMnemonicFromKeystore(keystore, password){
+    return new Promise((fulfill, reject)=>{
+        ethers.Wallet.fromEncryptedJson(keystore,password).then(res=>{
+            let mnemonicArr = res.mnemonic.split(' ');
+            let shuffleMnemonicArr = shuffle(mnemonicArr.slice());
+
+            fulfill({
+                mnemonic : mnemonicArr,
+                shuffleMnemonic : shuffleMnemonicArr,
+            });
+        })
+        .catch(err=>{
+            reject(err);
+        });
+    });
+}
+
 export function exportKeystore(keystore, password){
     return new Promise((fulfill, reject)=>{
         ethers.Wallet.fromEncryptedJson(keystore,password).then(res=>{
@@ -243,25 +278,31 @@ export function importPrivateKey(privateKey, password, needPrivateKey = false, n
 export function importMnemonic(mnemonic, password, path = "m/44'/60'/0'/0/0", needPrivateKey = false, needPublicKey = false){
     return new Promise((fulfill, reject)=>{
         try {
-            let wallet = ethers.Wallet.fromMnemonic(mnemonic, path);
-            wallet.encrypt(password).then(res=>{
-                let jsonObj = JSON.parse(res);
-                delete jsonObj['x-ethers'];
-
-                let response = {
-                    keystore : jsonObj,
-                };
-                if(needPublicKey){
-                    response.publicKey=res.publicKey;
-                }
-                if(needPrivateKey){
-                    response.privateKey=res.privateKey;
-                }
-                fulfill(response);
+            ethers.Wallet.fromMnemonic(mnemonic, path)
+            .then(wallet=>{
+                wallet.encrypt(password).then(res=>{
+                    let jsonObj = JSON.parse(res);
+                    delete jsonObj['x-ethers'];
+
+                    let response = {
+                        keystore : jsonObj,
+                    };
+                    if(needPublicKey){
+                        response.publicKey=res.publicKey;
+                    }
+                    if(needPrivateKey){
+                        response.privateKey=res.privateKey;
+                    }
+                    fulfill(response);
+                })
+                .catch(err=>{
+                    reject(err);
+                });
             })
             .catch(err=>{
                 reject(err);
             });
+
         } catch (error) {
             reject(error);
         }
