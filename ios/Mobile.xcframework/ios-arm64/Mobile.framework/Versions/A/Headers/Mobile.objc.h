// Objective-C API for talking to github.com/SmartMeshFoundation/Photon/mobile Go package.
//   gobind -lang=objc github.com/SmartMeshFoundation/Photon/mobile
//
// File is generated by gobind. Do not edit.

#ifndef __Mobile_H__
#define __Mobile_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class MobileAPI;
@class MobileIncomeDetail;
@class MobileSNM;
@class MobileSimpleAPI;
@class MobileStrings;
@class MobileSubscription;
@protocol MobileNotifyHandler;
@class MobileNotifyHandler;

@protocol MobileNotifyHandler <NSObject>
- (void)onError:(long)errCode failure:(NSString* _Nullable)failure;
- (void)onNotify:(long)level info:(NSString* _Nullable)info;
- (void)onReceivedTransfer:(NSString* _Nullable)tr;
- (void)onStatusChange:(NSString* _Nullable)s;
@end

/**
 * API for export interface

should not export any member because of gomobile's protocol
 */
@interface MobileAPI : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Address returns node's checksum address
for example: returns "0x7B874444681F7AEF18D48f330a0Ba093d3d0fDD2"
 */
- (NSString* _Nonnull)address;
/**
 * ChannelFor3rdParty generate info for 3rd party use,
for update transfer and withdraw.

example returns:
{
    "channel_identifier": "0x029a853513e98050e670eb6d5f36217998a2c689ef2f1c65b5954051490d5965",
    "open_block_number": 2644876,
    "token_network_address": "0xa3b6481d1c6aa8ba538e8fa9d4d8b1dbadfd379c",
    "partner_address": "0x64d11d0cbb3f4f9bb3ee09709d4254f0899a6381",
    "update_transfer": {
        "nonce": 0,
        "transfer_amount": null,
        "locksroot": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "extra_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "closing_signature": null,
        "non_closing_signature": null
    },
    "unlocks": null,
    "punishes": [
        {
            "lock_hash": "0xd4ec833949fa91e5f30b4e5e8b2e88cca10e8192a68e51bdb24d18220b3f519d",
            "additional_hash": "0xe800ff8e78b8e367fb165b76f6e0cd1f31d46e7fda640e02134eed4f5e983d53",
            "signature": "i24Lz6KVvDnlqsxhQzDu+IIx6jJKC4gdVyWg6NpkrfsEejzGV8F0CPB0oUUJjDZ2wmChKG6XjZQx24QkDmhsKhs="
        }
    ]
}
 */
- (NSString* _Nonnull)channelFor3rdParty:(NSString* _Nullable)channelIdentifier thirdPartyAddress:(NSString* _Nullable)thirdPartyAddress;
/**
 * CloseChannel close the  channel
如果force 为false,则表示希望双方协商关闭通道,
如果force为true,则表示希望直接连上关闭通道,不需要对方同意.
example returns:
{
    "channel_identifier": "0x97f73562938f6d538a07780b29847330e97d40bb8d0f23845a798912e76970e1",
    "open_block_number": 2560271,
    "partner_address": "0xf0f6E53d6bbB9Debf35Da6531eC9f1141cd549d5",
    "balance": 50,
    "partner_balance": 0,
    "locked_amount": 0,
    "partner_locked_amount": 0,
    "token_address": "0x7B874444681F7AEF18D48f330a0Ba093d3d0fDD2",
    "state": 2,
    "StateString": "closed",
    "settle_timeout": 150,
    "reveal_timeout": 0
}
 */
- (NSString* _Nonnull)closeChannel:(NSString* _Nullable)channelIdentifier force:(BOOL)force;
/**
 * ContractCallTXQuery 合约调用TX查询接口,4个参数均可传空值,空值即为不限制,4个参数对应的查询条件关系为and
channelIdentifierStr 有值时按通道ID查询
openBlockNumber 有值时按通道OpenBlockNumber查询,一般配合channelIdentifierStr参数一起使用,以精确定位到某一个通道
txTypeStr 有值时按tx类型查询,取值:
	TXInfoTypeDeposit            = "ChannelDeposit"
	TXInfoTypeClose              = "ChannelClose"
	TXInfoTypeSettle             = "ChannelSettle"
	TXInfoTypeCooperateSettle    = "CooperateSettle"
	TXInfoTypeUpdateBalanceProof = "UpdateBalanceProof"
	TXInfoTypeUnlock             = "Unlock"
	TXInfoTypePunish             = "Punish"
	TXInfoTypeWithdraw           = "Withdraw"
	TXInfoTypeApproveDeposit     = "ApproveDeposit"
	TXInfoTypeRegisterSecret     = "RegisterSecret"
txStatusStr 有值时按tx状态查询,取值:
	TXInfoStatusPending = "pending"
	TXInfoStatusSuccess = "success"
	TXInfoStatusFailed  = "failed"
 */
- (NSString* _Nonnull)contractCallTXQuery:(NSString* _Nullable)channelIdentifierStr openBlockNumber:(long)openBlockNumber tokenAddressStr:(NSString* _Nullable)tokenAddressStr txTypeStr:(NSString* _Nullable)txTypeStr txStatusStr:(NSString* _Nullable)txStatusStr;
/**
 * DebugUploadLogfile 上传photon日志到logserver
 */
- (NSString* _Nonnull)debugUploadLogfile;
/**
 * Deposit try to open a new channel on contract with
`partnerAddress` . the `settleTimeout` is the settle time of
the new channel.  `balanceStr` is the token to deposit to this channel and it  must be positive
 if `NewChannel` is true,  a new channel must be created and if `settleTimeout` is zero then it will be set as default
settle timeout.
if `NewChannel` is false, `settleTimeout` must be zero.

	//如果NewChannel为true
	//  SettleTimeout表示新建通道的结算窗口,如果SettleTimeout为0,则用系统默认计算窗口
	//如果NewChannel为 false
	//  SettleTimeout 必须为0

example returns:
{
    "channel_identifier": "0x97f73562938f6d538a07780b29847330e97d40bb8d0f23845a798912e76970e1",
    "open_block_number": 2560271,
    "partner_address": "0xf0f6E53d6bbB9Debf35Da6531eC9f1141cd549d5",
    "balance": 50,
    "partner_balance": 0,
    "locked_amount": 0,
    "partner_locked_amount": 0,
    "token_address": "0x7B874444681F7AEF18D48f330a0Ba093d3d0fDD2",
    "state": 1,
    "StateString": "opened",
    "settle_timeout": 150,
    "reveal_timeout": 0
}
 */
- (NSString* _Nonnull)deposit:(NSString* _Nullable)partnerAddress tokenAddress:(NSString* _Nullable)tokenAddress settleTimeout:(long)settleTimeout balanceStr:(NSString* _Nullable)balanceStr newChannel:(BOOL)newChannel;
/**
 * FindPath 查询所有从我到target的最低费用路径,该调用总是找pfs问路
example:
{
        "path_id": 0,
        "path_hop": 2,
        "fee": 10000000000,
        "result": [
            "0x3bc7726c489e617571792ac0cd8b70df8a5d0e22",
            "0x8a32108d269c11f8db859ca7fac8199ca87a2722",
            "0xefb2e46724f675381ce0b3f70ea66383061924e9"
        ]
    }
 */
- (NSString* _Nonnull)findPath:(NSString* _Nullable)targetStr tokenStr:(NSString* _Nullable)tokenStr amountStr:(NSString* _Nullable)amountStr;
/**
 * GetAssetsOnToken 参数逗号分隔
 */
- (NSString* _Nonnull)getAssetsOnToken:(NSString* _Nullable)tokenListStr;
/**
 * GetChannelList returns all the available channels

example returns:
[
    {
        "channel_address": "0xc502076485a3cff65f83c00095dc55e745f790eee4c259ea963969a343fc792a",
        "open_block_number": 5228715,
        "partner_address": "0x4B89Bff01009928784eB7e7d10Bf773e6D166066",
        "balance": 499490,
        "partner_balance": 1500506,
        "locked_amount": 0,
        "partner_locked_amount": 0,
        "token_address": "0x663495a1b8e9Be17083b37924cFE39e17858F9e8",
        "state": 1,
        "StateString": "opened",
        "settle_timeout": 100000,
        "reveal_timeout": 5000
    }
]
 */
- (NSString* _Nonnull)getChannelList;
/**
 * GetOneChannel return one specified channel with more detail information

exmaple returns:
{
    "channel_identifier": "0xc502076485a3cff65f83c00095dc55e745f790eee4c259ea963969a343fc792a",
    "open_block_number": 5228715,
    "partner_address": "0x4B89Bff01009928784eB7e7d10Bf773e6D166066",
    "balance": 499490,
    "patner_balance": 1500506,
    "locked_amount": 0,
    "partner_locked_amount": 0,
    "token_address": "0x663495a1b8e9Be17083b37924cFE39e17858F9e8",
    "state": 1,
    "StateString": "opened",
    "settle_timeout": 100000,
    "reveal_timeout": 0,
    "ClosedBlock": 0,
    "SettledBlock": 0,
    "OurUnknownSecretLocks": {},
    "OurKnownSecretLocks": {},
    "PartnerUnkownSecretLocks": {},
    "PartnerKnownSecretLocks": {},
    "OurLeaves": null,
    "PartnerLeaves": null,
    "OurBalanceProof": {
        "Nonce": 0,
        "TransferAmount": 0,
        "LocksRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "ChannelIdentifier": {
            "ChannelIdentifier": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "OpenBlockNumber": 0
        },
        "MessageHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "Signature": null,
        "ContractTransferAmount": 0,
        "ContractNonce": 0,
        "ContractLocksRoot": "0x0000000000000000000000000000000000000000000000000000000000000000"
    },
    "PartnerBalanceProof": {
        "Nonce": 0,
        "TransferAmount": 0,
        "LocksRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "ChannelIdentifier": {
            "ChannelIdentifier": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "OpenBlockNumber": 0
        },
        "MessageHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "Signature": null,
        "ContractTransferAmount": 0,
        "ContractNonce": 0,
        "ContractLocksRoot": "0x0000000000000000000000000000000000000000000000000000000000000000"
    },
    "Signature": null
}
 */
- (NSString* _Nonnull)getOneChannel:(NSString* _Nullable)channelIdentifier;
/**
 * GetReceivedTransfers retuns list of received transfer between `from_block` and `to_block`
it contains token swap
 */
- (NSString* _Nonnull)getReceivedTransfers:(NSString* _Nullable)tokenAddressStr from:(int64_t)from to:(int64_t)to;
/**
 * GetSentTransfers retuns list of sent transfer between `from_block` and `to_block`
 */
- (NSString* _Nonnull)getSentTransfers:(NSString* _Nullable)tokenAddressStr from:(int64_t)from to:(int64_t)to;
/**
 * GetSystemStatus 查询系统状态,
 */
- (NSString* _Nonnull)getSystemStatus;
/**
 * GetTransferStatus return transfer result
status should be one the following
// TransferStatusInit init
TransferStatusInit = 0

// TransferStatusCanCancel transfer can cancel right now
TransferStatusCanCancel =1

// TransferStatusCanNotCancel transfer can not cancel
TransferStatusCanNotCancel =2

// TransferStatusSuccess transfer already success
TransferStatusSuccess =3

// TransferStatusCanceled transfer cancel by user request
TransferStatusCanceled =4

// TransferStatusFailed transfer already failed
TransferStatusFailed =5

example returns:
{
    "LockSecretHash": "0x2f6dbd44fa95d7edc840570d3bc847e24846a5422fffa324cdd9c5cab945857e",
    "Status": 2,
    "StatusMessage": "MediatedTransfer 正在发送 target=4b89\nMediatedTransfer 发送成功\n收到 SecretRequest, from=3af7\nRevealSecret 正在发送 target=3af7\nRevealSecret 发送成功\n收到 RevealSecret, from=4b89\nUnlock 正在发送 target=4b89\nUnLock 发送成功,交易成功.\n"
}
 */
- (NSString* _Nonnull)getTransferStatus:(NSString* _Nullable)tokenAddressStr lockSecretHashStr:(NSString* _Nullable)lockSecretHashStr;
/**
 * NotifyNetworkDown :
 */
- (NSString* _Nonnull)notifyNetworkDown;
/**
 * OnResume 手机从后台切换至前台时调用
 */
- (NSString* _Nonnull)onResume;
/**
 * SettleChannel settle a channel
在通道已经关闭的情况下,过了结算窗口期以后,用户可以在合约上进行结算.
example returns:
{
    "channel_identifier": "0x97f73562938f6d538a07780b29847330e97d40bb8d0f23845a798912e76970e1",
    "open_block_number": 2560271,
    "partner_address": "0xf0f6E53d6bbB9Debf35Da6531eC9f1141cd549d5",
    "balance": 50,
    "partner_balance": 0,
    "locked_amount": 0,
    "partner_locked_amount": 0,
    "token_address": "0x7B874444681F7AEF18D48f330a0Ba093d3d0fDD2",
    "state": 3,
    "StateString": "settled",
    "settle_timeout": 150,
    "reveal_timeout": 0
}
 */
- (NSString* _Nonnull)settleChannel:(NSString* _Nullable)channelIdentifier;
/**
 * Stop stop Photon
 */
- (void)stop;
/**
 * Subscribe  As to Status Notification, we put these codebase into an individual package
 and use channel to communication.
 To avoid write block, we can write data through select.
 We should make effort to avoid start go routine.
 If there's need to create a new Photon instance, sub.Unsubscribe must be invoked to do that or memory leakage will occur.
 */
- (MobileSubscription* _Nullable)subscribe:(id<MobileNotifyHandler> _Nullable)handler error:(NSError* _Nullable* _Nullable)error;
/**
 * SwitchNetwork  switch between mesh and internet
 */
- (void)switchNetwork:(BOOL)isMesh;
/**
 * TokenPartners  Get all the channel partners of this token.
获取我在`token`上与其他所有节点的通道.
for example:
[
    {
        "partner_address": "0x151E62a787d0d8d9EfFac182Eae06C559d1B68C2",
        "channel": "api/1/channles/0x79b789e88c3d2173af4048498f8c1ce66f019f33a6b8b06bedef51dde72bbbc1"
    },
    {
        "partner_address": "0x201B20123b3C489b47Fde27ce5b451a0fA55FD60",
        "channel": "api/1/channles/0xd971f803c7ea39ee050bf00ec9919269cf63ee5d0e968d5fe33a1a0f0004f73d"
    }
]
 */
- (NSString* _Nonnull)tokenPartners:(NSString* _Nullable)tokenAddress;
/**
 * Tokens returns all the token have registered on Photon
for example:
[
    "0x7B874444681F7AEF18D48f330a0Ba093d3d0fDD2"
]
 */
- (NSString* _Nonnull)tokens;
/**
 * Transfers POST /api/1/transfers/0x2a65aca4d5fc5b5c859090a6c34d164135398226/0x61c808d82a3ac53231750dadc13c777b59310bd9
Initiating a Transfer
tokenAddress is  the token to transfer
targetAddress is address of the receipt of the transfer
amountstr is integer amount string
feestr is  always 0 now
isDirect is this should be True when no internet connection,otherwise false.
data: the info
example returns for a correct call:
transfer:
{
    "initiator_address": "0x292650fee408320D888e06ed89D938294Ea42f99",
    "target_address": "0x4B89Bff01009928784eB7e7d10Bf773e6D166066",
    "token_address": "0x663495a1b8e9Be17083b37924cFE39e17858F9e8",
    "amount": 1,
    "lockSecretHash": "0x5e86d58579cfbc77901a457d7f63e8ec6e47efc5848761f51e63729e7848a01d",
    "sync": true
}

the caller should call GetSentTransferDetail periodically to query this transfer's latest status.
 */
- (NSString* _Nonnull)transfers:(NSString* _Nullable)tokenAddress targetAddress:(NSString* _Nullable)targetAddress amountstr:(NSString* _Nullable)amountstr secretStr:(NSString* _Nullable)secretStr isDirect:(BOOL)isDirect data:(NSString* _Nullable)data routeInfoStr:(NSString* _Nullable)routeInfoStr;
/**
 * UpdateMeshNetworkNodes updates all nodes in MeshNetwork.
Nodes within the same local network have higher priority.
 */
- (NSString* _Nonnull)updateMeshNetworkNodes:(NSString* _Nullable)nodesstr;
/**
 * Version 获取版本信息
 */
- (NSString* _Nonnull)version;
/**
 * Withdraw :

	1. withdraw
	{ "amount":3333,}
	2. prepare for withdraw:
	{"op":"preparewithdraw",}
	3. cancel prepare:
	{"op": "cancelprepare"}
 */
- (NSString* _Nonnull)withdraw:(NSString* _Nullable)channelIdentifierHashStr amountstr:(NSString* _Nullable)amountstr op:(NSString* _Nullable)op;
@end

/**
 * IncomeDetail 用户收益明细 ,it's reference of super-node-managermanaement
 */
@interface MobileIncomeDetail : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull key;
@property (nonatomic) NSString* _Nonnull address;
@property (nonatomic) NSString* _Nonnull income;
@property (nonatomic) int64_t blockNumber;
@property (nonatomic) NSString* _Nonnull date;
@property (nonatomic) int64_t timestamp;
@property (nonatomic) NSString* _Nonnull totalFund;
@property (nonatomic) NSString* _Nonnull fund;
@property (nonatomic) NSString* _Nonnull proportion;
@end

/**
 * SNM app与合约打交道
 */
@interface MobileSNM : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSNM 创建管理接口
 */
- (nullable instancetype)init:(NSString* _Nullable)address keystorePath:(NSString* _Nullable)keystorePath ethRPCEndPoint:(NSString* _Nullable)ethRPCEndPoint password:(NSString* _Nullable)password contract:(NSString* _Nullable)contract snmService:(NSString* _Nullable)snmService;
/**
 * AddFunds 追加投资
 */
- (NSString* _Nonnull)addFunds:(NSString* _Nullable)value;
/**
 * GetFunds 当合约停止运行以后,投资人可以立即撤回投资
 */
- (NSString* _Nonnull)getFunds;
/**
 * PreSubFunds 预备撤回投资
 */
- (NSString* _Nonnull)preSubFunds:(NSString* _Nullable)value;
/**
 * Status 查询投资状态
 */
- (NSString* _Nonnull)status;
/**
 * SubFunds 锁定到期,撤回投资
 */
- (NSString* _Nonnull)subFunds;
/**
 * TryStopContract 当募集资金结合后,募集自己不够,任何人可以停止合约
 */
- (NSString* _Nonnull)tryStopContract;
@end

/**
 * SimpleAPI 不启动photon就可以查询通道信息
 */
@interface MobileSimpleAPI : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSimpleAPI 创建数据库访问接口
 */
- (nullable instancetype)init:(NSString* _Nullable)datadir address:(NSString* _Nullable)address;
/**
 * BalanceAvailabelOnPhoton 查询某个token在整个token上的可用金额
 */
- (NSString* _Nonnull)balanceAvailabelOnPhoton:(NSString* _Nullable)token;
/**
 * Stop 关闭数据库
 */
- (void)stop;
@end

/**
 * Strings represents s slice of strs.
 */
@interface MobileStrings : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewStrings which length is n
 */
- (nullable instancetype)init:(long)n;
/**
 * Get returns the string at the given index from the slice.
 */
- (NSString* _Nonnull)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the string at the given index in the slice.
 */
- (BOOL)set:(long)index str:(NSString* _Nullable)str error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of strs in the slice.
 */
- (long)size;
/**
 * String implements the Stringer interface.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Subscription represents an event subscription where events are
delivered on a data channel.
 */
@interface MobileSubscription : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Unsubscribe cancels the sending of events to the data channel
and closes the error channel.
 */
- (void)unsubscribe;
@end

/**
 * GetMinerFromSignature : 根据全节点提供的签名,以及我的钱包校验全节点地址是否正确
walletAddr: 抵押的钱包地址
sig: 矿工对WalletAddr的签名
如果不出错,应该返回矿工地址
 */
FOUNDATION_EXPORT NSString* _Nonnull MobileGetMinerFromSignature(NSString* _Nullable walletAddr, NSString* _Nullable sig, NSError* _Nullable* _Nullable error);

/**
 * NewSNM 创建管理接口
 */
FOUNDATION_EXPORT MobileSNM* _Nullable MobileNewSNM(NSString* _Nullable address, NSString* _Nullable keystorePath, NSString* _Nullable ethRPCEndPoint, NSString* _Nullable password, NSString* _Nullable contract, NSString* _Nullable snmService, NSError* _Nullable* _Nullable error);

/**
 * NewSimpleAPI 创建数据库访问接口
 */
FOUNDATION_EXPORT MobileSimpleAPI* _Nullable MobileNewSimpleAPI(NSString* _Nullable datadir, NSString* _Nullable address, NSError* _Nullable* _Nullable error);

/**
 * NewStrings which length is n
 */
FOUNDATION_EXPORT MobileStrings* _Nullable MobileNewStrings(long n);

/**
 * StartUp is entry point for mobile photon.
address is the Node address,such as 0x1a9ec3b0b807464e6d3398a59d6b0a369bf422fa.
keystorePath is the address of the private key,  geth keystore directory . eg ~/.geth/keystore.
ethRpcEndPoint is the URL connected to geth ,such as:ws://10.0.0.2:8546.
dataDir is the working directory of a node, such as ~/.photon .
passwordfile is the file to storage password eg ~/.geth/pass.txt .
apiAddr is  127.0.0.1:5001 for product,0.0.0.1:5001 for test .
listenAddr is the listenning address for incomming message from peers.
registryAddress is the contract address working on.
otherArgs is an array of other arguments.
todo 启动参数需要重构
1. 缺省的不用传递参数默认都不要传了,如果确实有需要可以走otherArgs
	包括(apiAddr,listenAddr,registryAddress,logFile)
2.默认启用的参数--verbosity和--debug应该去掉,尤其是--debug会自动上传日志
3. DefaultRevealTimeout 需要修改,不能在默认用3了,这个纯粹是为了测试
 */
FOUNDATION_EXPORT MobileAPI* _Nullable MobileStartUp(NSString* _Nullable privateKeyBinHex, NSString* _Nullable ethRPCEndPoint, NSString* _Nullable dataDir, NSString* _Nullable apiAddr, NSString* _Nullable listenAddr, NSString* _Nullable logFile, NSString* _Nullable registryAddress, MobileStrings* _Nullable otherArgs, NSError* _Nullable* _Nullable error);

@class MobileNotifyHandler;

/**
 * NotifyHandler is a client-side subscription callback to invoke on events and
subscription failure.
 */
@interface MobileNotifyHandler : NSObject <goSeqRefInterface, MobileNotifyHandler> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * some unexpected error
 */
- (void)onError:(long)errCode failure:(NSString* _Nullable)failure;
/**
 *  OnNotify get some important message Photon want to notify upper application
	level: 0:info,1:warn,2:error
	info: type InfoStruct struct {
		Type    int
		Message interface{}
		}
	当info.Type=0 表示Message是一个string,1表示Message是TransferStatus
 */
- (void)onNotify:(long)level info:(NSString* _Nullable)info;
/**
 * OnReceivedTransfer  receive a transfer
 */
- (void)onReceivedTransfer:(NSString* _Nullable)tr;
/**
 * OnStatusChange server connection status change
 */
- (void)onStatusChange:(NSString* _Nullable)s;
@end

#endif
